// 33. Explain the sliding window technique and its applications in array problems



public class SlidingWindowExample {
    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 5};
        int k = 3;
        System.out.println("Max sum of subarray of size " + k + ": " + maxSubArraySum(arr, k));
    }

    public static int maxSubArraySum(int[] arr, int k) {
        if (arr.length < k) {
            return -1;
        }

        int maxSum = 0, windowSum = 0;

        // Calculate the sum of the first window
        for (int i = 0; i < k; i++) {
            windowSum += arr[i];
        }
        maxSum = windowSum;

        // Slide the window across the array
        for (int i = k; i < arr.length; i++) {
            windowSum += arr[i] - arr[i - k];
            maxSum = Math.max(maxSum, windowSum);
        }

        return maxSum;
    }
}

// Time Complexity: O(n)
// Space Complexity: O(1)
