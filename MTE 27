// 27. Find the node where two singly linked lists intersect

class Node {
    int val;
    Node next;
    Node(int val) {
        this.val = val;
    }
}

public class IntersectionNode {
    public static void main(String[] args) {
        Node common = new Node(8);
        common.next = new Node(10);

        Node headA = new Node(3);
        headA.next = new Node(7);
        headA.next.next = common;

        Node headB = new Node(99);
        headB.next = new Node(1);
        headB.next.next = common;

        Node intersect = getIntersectionNode(headA, headB);
        System.out.println("Intersection at node with value: " + (intersect != null ? intersect.val : "null"));
    }

    public static Node getIntersectionNode(Node headA, Node headB) {
        Node a = headA, b = headB;
        while (a != b) {
            a = (a == null) ? headB : a.next;
            b = (b == null) ? headA : b.next;
        }
        return a;
    }
}

// Time Complexity: O(n + m)
// Space Complexity: O(1)
