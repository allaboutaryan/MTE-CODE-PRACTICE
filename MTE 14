// 14. Find the median of two sorted arrays using binary search

import java.util.Arrays;

public class MedianOfSortedArrays {
    public static void main(String[] args) {
        int[] nums1 = {1, 3};
        int[] nums2 = {2};

        double result = findMedianSortedArrays(nums1, nums2);
        System.out.println("Median: " + result);
    }

    public static double findMedianSortedArrays(int[] A, int[] B) {
        if (A.length > B.length) return findMedianSortedArrays(B, A);

        int m = A.length;
        int n = B.length;
        int low = 0, high = m;

        while (low <= high) {
            int i = (low + high) / 2;
            int j = (m + n + 1) / 2 - i;

            int leftA = (i == 0) ? Integer.MIN_VALUE : A[i - 1];
            int rightA = (i == m) ? Integer.MAX_VALUE : A[i];
            int leftB = (j == 0) ? Integer.MIN_VALUE : B[j - 1];
            int rightB = (j == n) ? Integer.MAX_VALUE : B[j];

            if (leftA <= rightB && leftB <= rightA) {
                if ((m + n) % 2 == 0)
                    return (Math.max(leftA, leftB) + Math.min(rightA, rightB)) / 2.0;
                else
                    return Math.max(leftA, leftB);
            } else if (leftA > rightB) {
                high = i - 1;
            } else {
                low = i + 1;
            }
        }

        return 0.0;
    }
}

// Time Complexity: O(log(min(m, n)))
// Space Complexity: O(1)
